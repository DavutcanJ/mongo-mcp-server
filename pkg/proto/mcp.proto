syntax = "proto3";

package mcp;

option go_package = "mongo-mcp-server/pkg/proto";

service MCPService {
  // Model operations
  rpc CreateModel(Model) returns (ModelResponse) {}
  rpc GetModel(ModelRequest) returns (ModelResponse) {}
  rpc ListModels(ListRequest) returns (ModelList) {}

  // Context operations
  rpc CreateContext(Context) returns (ContextResponse) {}
  rpc GetContext(ContextRequest) returns (ContextResponse) {}
  rpc ListContexts(ListRequest) returns (ContextList) {}

  // Protocol operations
  rpc ExecuteProtocol(Protocol) returns (ProtocolResponse) {}
  rpc GetProtocolStatus(ProtocolRequest) returns (ProtocolStatus) {}

  // Data operations
  rpc AddData(Data) returns (DataResponse) {}
  rpc GetData(DataRequest) returns (DataResponse) {}
  rpc ListData(ListRequest) returns (DataList) {}
  rpc DeleteData(DataRequest) returns (DeleteResponse) {}
}

// Model messages
message Model {
  string id = 1;
  string name = 2;
  string type = 3;
  map<string, string> parameters = 4;
}

message ModelRequest {
  string id = 1;
}

message ModelResponse {
  Model model = 1;
  string error = 2;
}

message ModelList {
  repeated Model models = 1;
  string error = 2;
}

// Context messages
message Context {
  string id = 1;
  string name = 2;
  string content = 3;
  map<string, string> metadata = 4;
}

message ContextRequest {
  string id = 1;
}

message ContextResponse {
  Context context = 1;
  string error = 2;
}

message ContextList {
  repeated Context contexts = 1;
  string error = 2;
}

// Protocol messages
message Protocol {
  string id = 1;
  string type = 2;
  string model_id = 3;
  string context_id = 4;
  string input = 5;
  map<string, string> parameters = 6;
}

message ProtocolRequest {
  string id = 1;
}

message ProtocolResponse {
  string id = 1;
  string output = 2;
  string error = 3;
}

message ProtocolStatus {
  string status = 1;
  string error = 2;
}

// Data messages
message Data {
  string id = 1;
  string type = 2;
  bytes content = 3;
  map<string, string> metadata = 4;
}

message DataRequest {
  string id = 1;
}

message DataResponse {
  Data data = 1;
  string error = 2;
}

message DataList {
  repeated Data data = 1;
  string error = 2;
}

message DeleteResponse {
  bool success = 1;
  string error = 2;
}

message ListRequest {
  int32 page = 1;
  int32 page_size = 2;
  map<string, string> filters = 3;
} 