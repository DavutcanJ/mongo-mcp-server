// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: pkg/proto/mcp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MCPService_CreateModel_FullMethodName       = "/mcp.MCPService/CreateModel"
	MCPService_GetModel_FullMethodName          = "/mcp.MCPService/GetModel"
	MCPService_ListModels_FullMethodName        = "/mcp.MCPService/ListModels"
	MCPService_CreateContext_FullMethodName     = "/mcp.MCPService/CreateContext"
	MCPService_GetContext_FullMethodName        = "/mcp.MCPService/GetContext"
	MCPService_ListContexts_FullMethodName      = "/mcp.MCPService/ListContexts"
	MCPService_ExecuteProtocol_FullMethodName   = "/mcp.MCPService/ExecuteProtocol"
	MCPService_GetProtocolStatus_FullMethodName = "/mcp.MCPService/GetProtocolStatus"
	MCPService_AddData_FullMethodName           = "/mcp.MCPService/AddData"
	MCPService_GetData_FullMethodName           = "/mcp.MCPService/GetData"
	MCPService_ListData_FullMethodName          = "/mcp.MCPService/ListData"
	MCPService_DeleteData_FullMethodName        = "/mcp.MCPService/DeleteData"
)

// MCPServiceClient is the client API for MCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MCPServiceClient interface {
	// Model operations
	CreateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*ModelResponse, error)
	GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error)
	ListModels(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ModelList, error)
	// Context operations
	CreateContext(ctx context.Context, in *Context, opts ...grpc.CallOption) (*ContextResponse, error)
	GetContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ContextResponse, error)
	ListContexts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ContextList, error)
	// Protocol operations
	ExecuteProtocol(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*ProtocolResponse, error)
	GetProtocolStatus(ctx context.Context, in *ProtocolRequest, opts ...grpc.CallOption) (*ProtocolStatus, error)
	// Data operations
	AddData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error)
	GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
	ListData(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*DataList, error)
	DeleteData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type mCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPServiceClient(cc grpc.ClientConnInterface) MCPServiceClient {
	return &mCPServiceClient{cc}
}

func (c *mCPServiceClient) CreateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, MCPService_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetModel(ctx context.Context, in *ModelRequest, opts ...grpc.CallOption) (*ModelResponse, error) {
	out := new(ModelResponse)
	err := c.cc.Invoke(ctx, MCPService_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) ListModels(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ModelList, error) {
	out := new(ModelList)
	err := c.cc.Invoke(ctx, MCPService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) CreateContext(ctx context.Context, in *Context, opts ...grpc.CallOption) (*ContextResponse, error) {
	out := new(ContextResponse)
	err := c.cc.Invoke(ctx, MCPService_CreateContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ContextResponse, error) {
	out := new(ContextResponse)
	err := c.cc.Invoke(ctx, MCPService_GetContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) ListContexts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ContextList, error) {
	out := new(ContextList)
	err := c.cc.Invoke(ctx, MCPService_ListContexts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) ExecuteProtocol(ctx context.Context, in *Protocol, opts ...grpc.CallOption) (*ProtocolResponse, error) {
	out := new(ProtocolResponse)
	err := c.cc.Invoke(ctx, MCPService_ExecuteProtocol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetProtocolStatus(ctx context.Context, in *ProtocolRequest, opts ...grpc.CallOption) (*ProtocolStatus, error) {
	out := new(ProtocolStatus)
	err := c.cc.Invoke(ctx, MCPService_GetProtocolStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) AddData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MCPService_AddData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, MCPService_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) ListData(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*DataList, error) {
	out := new(DataList)
	err := c.cc.Invoke(ctx, MCPService_ListData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mCPServiceClient) DeleteData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, MCPService_DeleteData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServiceServer is the server API for MCPService service.
// All implementations must embed UnimplementedMCPServiceServer
// for forward compatibility
type MCPServiceServer interface {
	// Model operations
	CreateModel(context.Context, *Model) (*ModelResponse, error)
	GetModel(context.Context, *ModelRequest) (*ModelResponse, error)
	ListModels(context.Context, *ListRequest) (*ModelList, error)
	// Context operations
	CreateContext(context.Context, *Context) (*ContextResponse, error)
	GetContext(context.Context, *ContextRequest) (*ContextResponse, error)
	ListContexts(context.Context, *ListRequest) (*ContextList, error)
	// Protocol operations
	ExecuteProtocol(context.Context, *Protocol) (*ProtocolResponse, error)
	GetProtocolStatus(context.Context, *ProtocolRequest) (*ProtocolStatus, error)
	// Data operations
	AddData(context.Context, *Data) (*DataResponse, error)
	GetData(context.Context, *DataRequest) (*DataResponse, error)
	ListData(context.Context, *ListRequest) (*DataList, error)
	DeleteData(context.Context, *DataRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedMCPServiceServer()
}

// UnimplementedMCPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMCPServiceServer struct {
}

func (UnimplementedMCPServiceServer) CreateModel(context.Context, *Model) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedMCPServiceServer) GetModel(context.Context, *ModelRequest) (*ModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedMCPServiceServer) ListModels(context.Context, *ListRequest) (*ModelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedMCPServiceServer) CreateContext(context.Context, *Context) (*ContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContext not implemented")
}
func (UnimplementedMCPServiceServer) GetContext(context.Context, *ContextRequest) (*ContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedMCPServiceServer) ListContexts(context.Context, *ListRequest) (*ContextList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContexts not implemented")
}
func (UnimplementedMCPServiceServer) ExecuteProtocol(context.Context, *Protocol) (*ProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteProtocol not implemented")
}
func (UnimplementedMCPServiceServer) GetProtocolStatus(context.Context, *ProtocolRequest) (*ProtocolStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolStatus not implemented")
}
func (UnimplementedMCPServiceServer) AddData(context.Context, *Data) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}
func (UnimplementedMCPServiceServer) GetData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMCPServiceServer) ListData(context.Context, *ListRequest) (*DataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListData not implemented")
}
func (UnimplementedMCPServiceServer) DeleteData(context.Context, *DataRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedMCPServiceServer) mustEmbedUnimplementedMCPServiceServer() {}

// UnsafeMCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServiceServer will
// result in compilation errors.
type UnsafeMCPServiceServer interface {
	mustEmbedUnimplementedMCPServiceServer()
}

func RegisterMCPServiceServer(s grpc.ServiceRegistrar, srv MCPServiceServer) {
	s.RegisterService(&MCPService_ServiceDesc, srv)
}

func _MCPService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).CreateModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetModel(ctx, req.(*ModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).ListModels(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_CreateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Context)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).CreateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_CreateContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).CreateContext(ctx, req.(*Context))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetContext(ctx, req.(*ContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_ListContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).ListContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_ListContexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).ListContexts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_ExecuteProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Protocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).ExecuteProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_ExecuteProtocol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).ExecuteProtocol(ctx, req.(*Protocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetProtocolStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetProtocolStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetProtocolStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetProtocolStatus(ctx, req.(*ProtocolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_AddData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).AddData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).GetData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_ListData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).ListData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_ListData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).ListData(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MCPService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).DeleteData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MCPService_ServiceDesc is the grpc.ServiceDesc for MCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCPService",
	HandlerType: (*MCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModel",
			Handler:    _MCPService_CreateModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _MCPService_GetModel_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _MCPService_ListModels_Handler,
		},
		{
			MethodName: "CreateContext",
			Handler:    _MCPService_CreateContext_Handler,
		},
		{
			MethodName: "GetContext",
			Handler:    _MCPService_GetContext_Handler,
		},
		{
			MethodName: "ListContexts",
			Handler:    _MCPService_ListContexts_Handler,
		},
		{
			MethodName: "ExecuteProtocol",
			Handler:    _MCPService_ExecuteProtocol_Handler,
		},
		{
			MethodName: "GetProtocolStatus",
			Handler:    _MCPService_GetProtocolStatus_Handler,
		},
		{
			MethodName: "AddData",
			Handler:    _MCPService_AddData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _MCPService_GetData_Handler,
		},
		{
			MethodName: "ListData",
			Handler:    _MCPService_ListData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _MCPService_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/mcp.proto",
}
